// Dependencies

const mysql = require("mysql");
const inquirer = require("inquirer");
const cTable = require('console.table');

// Connection to mysql database
const connection = mysql.createConnection({
    host: "localhost",

    // Your port; if not 3306
    port: 3306,

    // Your username
    user: "root",

    // Your password
    password: "password",
    database: "employee_tracker_db"
});


// Start the connection and run the init function.
connection.connect(function (err) {
    if (err) throw err;
    init()
});


// Starts an inquirer prompt that gives the user a list of items to choose from.
function init() {
    inquirer
        .prompt({
            name: "action",
            type: "list",
            message: "What would you like to do?",
            choices: [
                "Add Department",
                "Add Role",
                "Add Employee",
                // "View Departments",
                // "View Roles",
                "View Employees",
                "Update Employee Role",
                "Exit"
            ]
        })

        // Determine which function to use based on the user's answer.
        .then((answer) => {
            switch (answer.action) {
                case "Add Department":
                    addDept();
                    break;
                case "Add Role":
                    addRole();
                    break;
                case "Add Employee":
                    addEmployee();
                    break;
                case "View Employees":
                    viewEmployees();
                    break;
                // case "View Departments":
                //     viewTable("department");
                //     break;
                // case "View Roles":
                //     viewTable("role");
                //     break;
                // If Exit is select the program will close.
                case "Exit":
                    connection.end();
                    break;
            }
        })
}

// Function to create new departments.
function addDept() {
    inquirer
        .prompt({
            name: "department",
            type: "input",
            message: "What is the name of the Department?"
        })
        .then((answer) => {
            // console.log(answer.department)
            // Place the users answer into the query and run the query.
            const query = connection.query(
                "INSERT INTO department (name) VALUES (?);",
                [answer.department],
                function (err, res) {
                    if (err) throw err;
                    // Display a success statement.
                    console.log(res.affectedRows + " department added!\n")

                })
            // Run the init function again.
            console.log(query.sql)
            init()
        })
}

// Function to add new roles.
function addRole() {
    inquirer
        .prompt([
            {
                name: "role",
                type: "input",
                message: "What is the name of the role?"
            },
            {
                name: "salary",
                type: "input",
                message: "What is the starting salary for this role?",
            }
        ])
        .then((answer) => {
            // Place the users answers into the query below.
            const query = connection.query(
                "INSERT INTO role (title, salary) VALUES (?, ?);",
                [answer.role, answer.salary],
                function (err, res) {
                    if (err) throw err;
                    // Display a success message.
                    console.log(res.affectedRows + " role added!\n")

                })
            // Run the init function again.
            console.table(query.sql)
            init()
        })
}

// Function to add a new employee.
function addEmployee() {
    inquirer
        .prompt([
            {
                name: "firstName",
                type: "input",
                message: "What is the employee's first name?"
            },
            {
                name: "lastName",
                type: "input",
                message: "What is the employee's last name?",
            },
            {
                name: 'role',
                type: "list",
                // The choices array is generated by running the getRoles() function
                choices: getRoles()
            },
            {
                name: 'manager',
                type: "list",
                // The choices array is generated by running the getEmployees() function
                choices: getEmployees()
            }
        ])
        .then((answer) => {
            console.log(answer)

            // Assign the new employee's role to the index of the role that was chosen as the table requires an int value. 1 is also added as the first value in the table is 1 rather than 0 in an array.
            var employeeRole = getRoles().indexOf(answer.role) + 1

            // Assign the new employee's manager to the index of the manager that was chosen as the table requires an int value.
            var employeeManager = getEmployees().indexOf(answer.manager)

            // If the user selects "None" for the manager, change the value to null for consistency in the table.
            if (employeeManager === "None") {
                employeeManager = null
            }

            // Insert the user's answers into the query below.
            const query = "INSERT INTO employee (first_name, last_name, role_id, manager_id) VALUES (?, ?, ?, ?);"
            connection.query(query, [answer.firstName, answer.lastName, employeeRole, employeeManager],
                function (err, res) {
                    if (err) throw err;
                    // Display a success message.
                    console.log(res.affectedRows + " employee added!\n")

                })
            // Run the init function again.
            init()
        })
}

// Function to view all employees
function viewEmployees() {
    // A select query that will display information about the employees based on information from the 3 associated tables.
    // First determine the columns that are needed (employee.first_name, employee.last_name, title, salary, department,
    const query = "SELECT concat(employee.first_name,' ', employee.last_name) AS name, title, salary, department, concat(manager.first_name, ' ', manager.last_name) AS manager FROM employee INNER JOIN role ON employee.role_id = role.id INNER JOIN department ON role.department_id = department.id LEFT JOIN employee manager on employee.manager_id = manager.id;"

    connection.query(query, (err, res) => {
        if (err) throw err;
        // Display the results in a console.table(), then run the init() function again.
        console.table(res)
        init()
    })
}

// Function to
function getRoles() {
    // Array that will hold the title of all available roles.
    const roles = []

    // Query all of the data from the role table. 
    const query = "SELECT * FROM role;"
    connection.query(query, (err, res) => {
        if (err) throw err;
        // For each row in the table push only the title into the roles array.
        res.forEach(role => {
            roles.push(role.title)
        });
    })
    // Return the roles array.
    return roles
}

function getEmployees() {

    // Array that will hold the names of all available employees.
    // None is included as a choice for employees with no direct manager.
    const employees = ['None']

    // Query all of the data from the employee table.
    const query = "SELECT * FROM employee;"
    connection.query(query, (err, res) => {
        if (err) throw err;
        // For each row in the table push the first name and last name into the employees array.
        res.forEach(employee => {
            employees.push(`${employee.first_name} ${employee.last_name}`)
        });
    })
    // Return the employees array.
    return employees
}
